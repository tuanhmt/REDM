library(bkt)
remove.packages("bkt")
options("cores")
options()
8*7
6*8
7*6
48+49
835+85
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
setwd("~/Documents/Analysis/analysis lib/old_code")
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
source('~/Documents/Analysis/analysis lib/old_code/learning_curves.R')
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
setwd("~/Documents/Analysis/analysis lib/old_code")
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
sk = list( init=0.3, learn=0.15, slip=0.2, guess=0.15 )
sk.sim = sim.stu( 10, 20, sk )
names(sk.sim)
sk.sim
opps = sk.sim$opps
sk.params = sk
sk.params
pk = pknown( opps, sk.params )
pk
opps
apply( !is.na(opps), 2, sum )
apply( !is.na(opps), 1, sum )
n.stu = nrow(opps)
n.opps = ncol(opps)
n.opps.per.stu = apply( !is.na(opps), 1, sum )
pk[,2:nopps]
pk[,2:n.opps]
pk[,2:n.opps][1,n.opps.per.stu[1]]
i = 1
stu.pk = pk[,2:n.opps][i,n.opps.per.stu[i]]
stu.pk
stu.params = sk.params
stu.params
stu.params$init = pk[,2:n.opps][i,n.opps.per.stu[i]]
stu.params
padded.opps
padded.opps = opps
padded.opps
n.opps.per.stu[i]
n.opps.per.stu[i]:n.opps
seq(n.opps.per.stu[i]+1,n.opps)
opps[i,seq(n.opps.per.stu[i]+1,n.opps)]
opps[i,seq(n.opps.per.stu[i],n.opps)]
padded.opps[i,seq(n.opps.per.stu[i]+1,n.opps)]
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
opps
padded.opps = sim.pad.opps( opps, sk )
padded.opps
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
padded.opps = sim.pad.opps( opps, sk )
padded.opps
padded.opps = sim.pad.opps( opps, sk )
padded.opps
source('~/Documents/Analysis/analysis lib/old_code/hmm_fit_skill_params.R')
random.params()
source('~/Documents/Analysis/analysis lib/old_code/stusim.r')
padded.opps = sim.pad.opps( opps, sk )
padded.opps
padded.opps = sim.pad.opps( opps, sk )
source('~/Documents/Analysis/analysis lib/old_code/learning_curves.R')
connect.to.db('2010r2_analysis_db')
a1.toc = fetch_curriculum_section_skills('Algebra I')
a1.toc = fetch_curriculum_section_skills(default.connection, 'Algebra I')
a1.toc = fetch_curriculum_section_skills('Algebra I', default.connection)
unique(a1.toc$unit_name)
a1.toc[a1.toc$section_name =="CTA1_02-1",]
a1.toc[a1.toc$section_name =="CTA1_02-2",]
a1.toc[41,]
sk = a1.toc[41,]
opps = get_skill_opps( fetch.lc.data( default.connection, sk$section_name, sk$skill_name))
dim(opps)
opps[1:4,]
disconnect.from.db()
padded.opps = sim.pad.opps( opps, random.params() )
opps[1:4,]
padded.opps[1:4,]
sum(is.na(opps))
sum(is.na(padded.opps))
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library("bkt", lib.loc="/Users/tnixon/R-dev")
800*0.8
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library(bkt)
library(bkt)
400 + 1910.45
400 + 1910.45 - ( 31.97 + 29.95 + 36.27)
27.76 - 8.49
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library(bkt)
835.03 - (17.62+25+30.89)
install.packages(c("cluster", "foreign", "KernSmooth", "lattice", "Matrix", "nnet", "RJSONIO", "rpart", "shiny", "XML"), lib="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
install.packages("rmr")
detach("package:methods", unload=TRUE)
dev_mode()
library(bkt)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
dev_mode()
library(bkt)
library(bkt)
library(bkt)
library(bkt)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
document()
library(bkt)
library(bkt)
data = as.its.data("../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = params[["cols"]], stu.obs.cols = params[["stu.obs.cols"]], kc.oppr.cols = params[["kc.oppr.cols"]], first = 'stu')
cols = c(2,4,6,11,14,15,16,18,19)
kc.oppr.cols = c(8,9)
stu.obs.cols = c(1,5)
params = list(cols, stu.obs.cols, kc.oppr.cols)
data = as.its.data("../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = params[["cols"]], stu.obs.cols = params[["stu.obs.cols"]], kc.oppr.cols = params[["kc.oppr.cols"]], first = 'stu')
library(bkt)
load("~/Desktop/Data - Experiment/mrt_REDM/bkt/.RData")
View(params)
data.params = params
data = as.its.data("../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = params[["cols"]], stu.obs.cols = params[["stu.obs.cols"]], kc.oppr.cols = params[["kc.oppr.cols"]], first = 'stu')
library(bkt)
data = as.its.data("../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = params[["cols"]], stu.obs.cols = params[["stu.obs.cols"]], kc.oppr.cols = params[["kc.oppr.cols"]], first = 'stu')
data = as.its.data("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = params[["cols"]], stu.obs.cols = params[["stu.obs.cols"]], kc.oppr.cols = params[["kc.oppr.cols"]], first = 'stu')
data = as.its.data("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = data.params[["cols"]], stu.obs.cols = data.params[["stu.obs.cols"]], kc.oppr.cols = data.params[["kc.oppr.cols"]], first = 'stu')
install.packages("tidyr")
library(bkt)
data = as.its.data("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = data.params[["cols"]], stu.obs.cols = data.params[["stu.obs.cols"]], kc.oppr.cols = data.params[["kc.oppr.cols"]], first = 'stu')
View(data.params)
data = as.its.data("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = data.params[[1]], stu.obs.cols = data.params[[2]], kc.oppr.cols = data.params[[3]])
View(data)
data = as.bkt.data(data = data, minStu = 100, minOppr = 4)
View(data)
bkt.rmse(data[["Changing axis bounds"]], bkt.random.params())
library(bkt)
library(bkt)
View(data)
View(data)
library(bkt)
library(bkt)
bkt.convert.seq(c(1, 0, 1, 0))
library(bkt)
bkt.convert.seq(c(1, 0, 1, 0))
library(bkt)
bkt.convert.seq(c(1, 0, 1, 0))
bkt.initHMM(bkt.random.params())
test = data[["Changing axis bounds"]]
test = lapply(test, bkt.convert.seq)
View(test)
baumWelch(bkt.initHMM(bkt.random.params()), test)
baumWelch(bkt.initHMM(bkt.random.params()), test[["02ZjVTxC34"]])
library(bkt)
View(data.params)
bkt.bforce.search(data[["Changing axis bounds"]])
library(bkt)
library(bkt)
View(data)
test = list(data[["Changing axis bounds"]], data[["Changing axis intervals"]])
View(test)
names(data)
library(bkt)
test = list(data["Changing axis bounds"], data["Changing axis intervals"])
View(test)
test = lapply(test, unlist)
View(test)
View(test)
test = list(data[["Changing axis bounds"]], data[["Changing axis intervals"]])
names(test) = c("Changing axis bounds", "Changing axis intervals")
View(test)
View(test)
names(test)
ex.bforce(test)
data.lenght
lengths(data)
dims(data)
dim(data)
length(data)
library(bkt)
ex.bforce(test)
a = "asdf"
test$a = 10
View(test)
test$.a = 10
View(test)
test$(.a) = 10
test$..a = 10
View(test)
library(bkt)
ex.bforce(test)
test = list(data[["Changing axis bounds"]], data[["Changing axis intervals"]])
names(test) = c("Changing axis bounds", "Changing axis intervals")
View(test)
library(bkt)
bf = ex.bforce(data)
bf = ex.bforce(test)
View(bf)
View(data.params)
View(test)
library(bkt)
bf = ex.bforce(test)
View(bf)
View(data.params)
View(data.params)
View(bf)
library(bkt)
library(bkt)
install.packages("devtools")
library("devtools", lib.loc="~/Library/R/3.5/library")
devtools::use_build_ignore('bkt-hmm-redm.R')
library(bkt)
devtools::use_build_ignore('R/bkt-hmm-redm.R')
library(bkt)
bkt.hmm.fit()
library(bkt)
library(bkt)
library(bkt)
devtools::load_all(".")
library(bkt)
detach("package:bkt", unload=TRUE)
remove.packages("bkt", lib="~/Library/R/3.5/library")
install.packages("~/Desktop/Data - Experiment/mrt_REDM/bkt_1.0.tar.gz", repos = NULL, type = "source")
library("bkt", lib.loc="~/Library/R/3.5/library")
library(bkt)
library(bkt)
library(bkt)
library(bkt)
library(bkt)
View(data)
kc.data = data
View(data.params)
names(data.params) = c("cols", "stu.obs.cols", "kc.oppr.cols")
View(data.params)
View(data.params)
View(data.params)
stu.data = as.its.data("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", cols = data.params[["cols"]], stu.obs.cols = data.params[["stu.obs.cols"]], kc.oppr.cols = data.params[["kc.oppr.cols"]], first = 'stu')
View(stu.data)
stu.data = as.bkt.data(stu.data, minStu = 100, minOppr = 4, first = 'stu')
View(stu.data)
stu.data[["02ZjVTxC34"]][["Convert unit, multiplier"]]
View(stu.data)
library(bkt)
library(bkt)
data = bkt.data.prep(list(url="../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", sep = '~~'), data.params)
library(bkt)
data = bkt.data.prep(list(url="../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", sep = '~~'), data.params)
library(bkt)
data = bkt.data.prep(list(url="../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", sep = '~~'), data.params)
list(url="../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", sep = '~~'
)
list(url="../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", sep = '~~')$url
library(bkt)
library(bkt)
data = bkt.data.prep(list(url="../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", sep = '~~'), data.params)
View(data.params)
file.params = bkt.file.params("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt", '~~')
View(file.params)
library(bkt)
data = bkt.data.prep(file.params, cols.params)
cols.params = data.params
data = bkt.data.prep(file.params, cols.params)
View(data)
library(bkt)
data = bkt.data.prep(file.params, cols.params)
View(data)
View(cols.params)
data = bkt.data.prep(file.params, cols.params)
library(bkt)
data = bkt.data.prep(file.params, cols.params)
cols.params$cols
library(bkt)
data = bkt.data.prep(file.params, cols.params)
library(bkt)
data = bkt.data.prep(file.params, cols.params)
class(cols.params$cols)
library(bkt)
data = bkt.data.prep(file.params, cols.params)
library(bkt)
data = bkt.data.prep(file.params, cols.params)
View(data)
data = bkt.data.prep(file.params, cols.params)
View(cols.params)
cols.params$base = 'kc'
data = bkt.data.prep(file.params, cols.params)
View(data)
library(bkt)
filter.params = bkt.filter.params()
data = bkt.data(file.params, cols.params, filter.params)
View(data)
filter.params = bkt.filter.params(minStu = 100)
data = bkt.data(file.params, cols.params, filter.params)
library(bkt)
View(filter.params)
filter.params = bkt.filter.params()
data = bkt.data(file.params, cols.params, filter.params)
View(data)
View(data)
cols.params$base = 'stu'
data = bkt.data(file.params, cols.params, filter.params)
library(bkt)
library(bkt)
data = bkt.data(file.params, cols.params, filter.params)
View(data)
library(bkt)
data = bkt.data(file.params, cols.params, filter.params)
View(data)
cols.params$base = 'kc'
filter.params$minObs = 6
filter.params$minObs = 4
kc.data = bkt.data(file.params, cols.params, filter.params)
View(kc.data)
filter.params$minObs
library(bkt)
kc.data = bkt.data(file.params, cols.params, filter.params)
View(kc.data)
filter.params$minKc = 2;
filter.params$minKc = 1;
cols.params$base = 'stu'
stu.data = bkt.data(file.params, cols.params, filter.params)
View(stu.data)
library(bkt)
stu.care = bkt.care.stu(stu.data, threshold = 3, result = 0.5)
library(bkt)
stu.care = bkt.care.stu(stu.data, threshold = 3, result = 0.5)
View(stu.data)
View(kc.data)
library(bkt)
stu.care = bkt.care.stu(stu.data, threshold = 3, result = 0.5)
View(stu.care)
warnings()
library(bkt)
stu.care = bkt.care.stu(stu.data, threshold = 3, result = 0.5)
View(stu.care)
library(bkt)
stu.care = bkt.care.stu(stu.data, threshold = 3, result = 0.5)
View(stu.care)
library(bkt)
stu.care = bkt.care.stu(stu.data, threshold = 3, result = 0.5)
View(stu.care)
load("~/Desktop/Data - Experiment/mrt_REDM/bkt/.RData")
load("~/Desktop/Data - Experiment/mrt_REDM/bkt/.RData")
load("~/Desktop/Data - Experiment/mrt_REDM/bkt/.RData")
View(bf)
library(bkt)
View(bf)
lapply(bf, function(x) x$best.fit)
mean(unlist(lapply(bf, function(x) x$best.fit)))
library(bkt)
library(bkt)
View(bf)
library(bkt)
library(bkt)
library(bkt)
library(bkt)
library(bkt)
View(data.params)
data.params = list(cols = bkt.cols.params(data.params[[1]], data.params[[2]], data.params[[3]]), file = bkt.file.params("../../BKT/Data/algebra_2005_2006/algebra_2005_2006_train.txt"), filter = bkt.filter.params())
View(data.params)
View(data.params)
kc.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(kc.data)
library(bkt)
kc.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
library(bkt)
View(kc.data)
View(data)
library(bkt)
kc.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(data.params)
data.params$cols$kc.oppr.cols = c(8,9)
data.params$cols$stu.obs.cols = c(1,5)
kc.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(kc.data)
library(bkt)
kc.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(bf)
View(kc.data)
View(kc.data)
data.params$cols$base = 'stu'
stu.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(stu.data)
care = bkt.care.stu(stu.data)
View(care)
View(bf)
stu.care = care
View(stu.care)
library(bkt)
grid = bkt.bforce.search.grid()
library(bkt)
bkt.reduce.grid(grid, stu.care)
View(grid)
library(bkt)
bkt.reduce.grid(grid, stu.care)
grid = grid[slip < bkt.reduce.grid(grid, stu.care)]
View(grid)
bkt.bforce.search(kc.data[["Changing axis bounds"]], grid)
View(bf)
bkt.bforce.search(kc.data[["Changing axis intervals"]], grid)
View(kc.data)
View(bf)
library(bkt)
bkt.bf = bkt.ex.bforce(kc.data)
View(bkt.bf)
View(bkt.bf)
library(bkt)
bkt.ecal.bf = bkt.ex.bforce.ecal(kc.data, stu.care)
View(bkt.ecal.bf)
bkt.ex.bf.mean(bkt.ecal.bf)
bkt.ex.bf.mean(bkt.bf)
bkt.ecal.bf[["Changing axis bounds"]][["cost"]][["user.self"]]
bkt.cost = lapply(bkt.bf, function(x) x$cost[["user.self"]])
bkt.ecal.cost = lapply(bkt.ecal.bf, function(x) x$cost[["user.self"]])
View(bkt.ecal.bf)
View(bkt.cost)
mean(unlist(bkt.cost))
mean(unlist(bkt.ecal.cost))
147.1484 / 73.46
help switch()
help("switch")
View(data.params)
View(data.params)
data.params[["cols"]][["cols"]]
paste(data.params[["cols"]][["cols"]],sep = ",")
paste(data.params[["cols"]][["cols"]])
paste(data.params[["cols"]][["cols"]], collapse = ",")
library(bkt)
View(data.params)
data.params[["file"]][["url"]]
data.params$file$url = "../../BKT/Data/algebra_2008_2009/algebra_2008_2009_train.txt"
data.params$cols = bkt.kdd.cols.params("2008-2009", base = 'kc')
save.image("~/Desktop/Untitled.RData")
load("~/Desktop/Data - Experiment/mrt_REDM/exkdd20052006.RData")
load("~/Desktop/Data - Experiment/mrt_REDM/exkdd20052006.RData")
View(data.params)
bkt.data(data.params$file, data.params$cols, data.params$filter)
kc.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(kc.data)
data.params$cols$base = 'stu'
stu.data = bkt.data(data.params$file, data.params$cols, data.params$filter)
View(stu.data)
stu.care = bkt.care.stu(data.stu = stu.data)
View(stu.care)
grid.params = bkt.bforce.search.grid()
grid.params = grid.params[slip < bkt.reduce.grid(grid.params, stu.care)]
View(grid.params)
stu.care = bkt.care.stu(stu.data, threshold = 5)
View(stu.care)
bkt.reduce.grid(bkt.bforce.search.grid(), stu.care)
bkt.rmse(bkt.random.params(), kc.data[["Adding Polynomials-1"]])
bkt.random.params()
bkt.rmse(opps = kc.data$`Adding Polynomials-1`, params = bkt.random.params())
View(data.params)
library(bkt)
library(bkt)
View(data.params)
data.params[["file"]][["url"]]
library(bkt)
bkt.kdd.params()
data.params = bkt.kdd.params()
View(data.params)
library(bkt)
library(bkt)
data.params = bkt.kdd.params()
library(bkt)
data.params = bkt.kdd.params()
View(data.params)
library(bkt)
data.params = bkt.kdd.params()
View(data.params)
library(bkt)
data.params = bkt.kdd.params()
View(data.params)
kc.data = bkt.data()
library(bkt)
kc.data = bkt.data()
View(kc.data)
