packrat::init(options = list(vcs.ignore.src = TRUE, external.packages = c("data.table")))
packrat::init(options = list(vcs.ignore.src = TRUE))
packrat::init()
install.packages("data.table")
packrat::init(options = list(vcs.ignore.src = TRUE))
install.packages("data.table")
remove.packages("data.table", lib="~/Library/R/3.5/library")
library("data.table", lib.loc="~/Desktop/Data - Experiment/mrt_REDM/bkt/packrat/lib/x86_64-apple-darwin15.6.0/3.5.0")
library("packrat", lib.loc="~/Desktop/Data - Experiment/mrt_REDM/bkt/packrat/lib/x86_64-apple-darwin15.6.0/3.5.0")
load("~/Desktop/Data - Experiment/mrt_REDM/.RData")
install.packages("dplyr")
install.packages("tidyverse")
library("dbplyr", lib.loc="~/Desktop/Data - Experiment/mrt_REDM/bkt/packrat/lib/x86_64-apple-darwin15.6.0/3.5.0")
library("data.table", lib.loc="~/Desktop/Data - Experiment/mrt_REDM/bkt/packrat/lib/x86_64-apple-darwin15.6.0/3.5.0")
library("dplyr", lib.loc="~/Desktop/Data - Experiment/mrt_REDM/bkt/packrat/lib/x86_64-apple-darwin15.6.0/3.5.0")
detach("package:dbplyr", unload=TRUE)
packrat::disable()
library(bkt)
library(bkt)
library("data.table", lib.loc="~/Library/R/3.5/library")
library("dplyr", lib.loc="~/Library/R/3.5/library")
library(bkt)
bkt.rmse(mrt.data[["Changing axis bounds"]], grid.param[1,])
library(bkt)
library(bkt)
View(mrt.data)
library(bkt)
library(bkt)
as.bkt.params(c(0.9, 0.2, 0.1, 0.3))
version
library(bkt)
library(bkt)
library(bkt)
as.bkt.params(c(0.9, 0.2, 0.1, 0.3))
class(as.bkt.params(c(0.9, 0.2, 0.1, 0.3)))
bkt.rmse(mrt.data[["Changing axis bounds"]], as.bkt.params(c(0.9, 0.2, 0.1, 0.3)))
system.time(bkt.rmse(mrt.data[["Changing axis bounds"]], as.bkt.params(c(0.9, 0.2, 0.1, 0.3))))
0.278 * 1296
360 / 60
system.time(bkt.sse(mrt.data[["Changing axis bounds"]], as.bkt.params(c(0.9, 0.2, 0.1, 0.3))))
View(mrt.data)
mean(unlist(lapply(opps, function(x) system.time(bkt.sse.seq(x, grid.param[1,]))))
)
mean(unlist(lapply(mrt.data[["Changing axis bounds"]], function(x) system.time(bkt.sse.seq(x, grid.param[1,])))))
0.0004534562 * 434
system.time(bkt.sse(mrt.data[["Changing axis bounds"]], grid.param[1,]))
View(mrt.data)
max(unlist(lapply(mrt.data[["Changing axis bounds"]], length)))
mrt.data[["Changing axis bounds"]][length(mrt.data[["Changing axis bounds"]]) == 319]
mrt.data[["Changing axis bounds"]][lapply(mrt.data[["Changing axis bounds"]], length) == 319]
bkt.sse.seq(mrt.data[["Changing axis bounds"]][["dvG32rxRzQ"]], grid.param[1,])
system.time(bkt.sse.seq(mrt.data[["Changing axis bounds"]][["dvG32rxRzQ"]], grid.param[1,]))
system.time(bkt.pcorrect.seq(mrt.data[["Changing axis bounds"]][["dvG32rxRzQ"]], grid.param[1,]))
system.time(bkt.pknown.seq(mrt.data[["Changing axis bounds"]][["dvG32rxRzQ"]], grid.param[1,]))
0.003 / 319
test = mrt.data[["Changing axis bounds"]]
View(test)
test[, sum(.SD), by = .I]
test[, sum(.SD), by = ..I]
test[, print(.SD), by = ..I]
test[, print(.SD), by = .I]
test[, class(.SD), by = .I]
View(test)
test = grid.param
View(test)
test[, class(.SD), by = .I]
test[, sum(.SD), by = .I]
View(test)
test[, sum(.SD), by = ..I]
test[, sum(.SD), by = I]
test[, sum(.SD), by = .I]
test[, a := sum(.SD), by = .I]
View(test)
test$a = NULL
test[, sum]
test[, sum(x)]
test[, sum(.SD)]
test[, sum(.I)]
View(test)
apply(test, 1, mean)
library(bkt)
View(mrt.data)
bkt.bforce.search(mrt.data[["distribute-sp"]], grid.param)
View(mrt.data)
grid.param = bkt.bforce.search.grid(step.size = 0.05)
View(grid.param)
grid.param = bkt.bforce.search.grid()
library(bkt)
bf = bkt.bforce.search(mrt.data[["distribute-sp"]], grid.param)
View(bf)
bf = bkt.bforce.search(mrt.data[["Changing axis bounds"]], grid.param)
View(bf)
365/60
View(ssc)
View(ssc)
names(mrt.data[["Changing axis bounds"]])
install.packages("HMM")
library("HMM", lib.loc="~/Library/R/3.5/library")
library(bkt)
library(bkt)
bkt.as.hmm.params(bkt.random.params())
a = sample(c(rep("L",100),rep("R",300)))
class(a)
View(a)
b = sample(c(rep("L",300),rep("R",100)))
observation = c(a, b)
View(observation)
bw = baumWelch(bkt.as.hmm.params(bkt.random.params()), mrt.data[["Changing axis bounds"]][["02ZjVTxC34"]], maxIterations = 100, delta = 10)
test = mrt.data[["Changing axis bounds"]][["02i5jCrfQK"]]
class(test)
bw = baumWelch(bkt.as.hmm.params(bkt.random.params()), mrt.data[["Changing axis bounds"]][["02ZjVTxC34"]], maxIterations = 100, delta = 10)
library(bkt)
bw = baumWelch(bkt.as.hmm.params(bkt.random.params()), mrt.data[["Changing axis bounds"]][["02ZjVTxC34"]], maxIterations = 100, delta = 10)
bkt.as.hmm.params(bkt.random.params())
library(bkt)
test
replace(test, test == 1, 2)
test = replace(test, test == 1, 2)
test = replace(test, test == 0, 1)
test
bw = baumWelch(bkt.as.hmm.params(bkt.random.params()), test, maxIterations = 100, delta = 10)
View(bw)
bw[["hmm"]][["transProbs"]]
bw[["hmm"]][["emissionProbs"]]
library(bkt)
bw = baumWelch(bkt.hmm.params(bkt.random.params()), test, maxIterations = 100, delta = 10)
hmm.bkt.params(bw)
bkt.rmse(test, hmm.bkt.params(bw))
test = replace(test, test == 1, 0)
test = replace(test, test == 2, 1)
bkt.rmse(test, hmm.bkt.params(bw))
