library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
stu.ecal[[1]][[5AhC6ORULJ]]
stu.ecal[[1]][['5AhC6ORULJ']]
kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
bkt.hmm.fit(hmm = bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][['5AhC6ORULJ']], c('guess'))), observation = bkt.convert.seq(kc.data.train[["Changing axis bounds"]][['5AhC6ORULJ']]))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
View(hmm)
View(hmm)
View(tempHmm)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
hmm
observation
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
if (NA < 1E-10)
{}
{}
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
View(hmm)
View(tempHmm)
View(newHmm)
View(tempHmm)
tempHmm[["transProbs"]]
View(hmm)
View(newHmm)
View(tempHmm)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
View(hmm)
View(newHmm)
View(tempHmm)
NaN - 0.2
0.2 - NaN
is.list(observation)
is.vector(observation)
observation[!is.na(observation)]
as.charactor(observation[!is.na(observation)])
as.character(observation[!is.na(observation)])
bwIter(hmm, as.character(observation[!is.na(observation)]))
bw.to.hmm(bwIter(hmm, as.character(observation[!is.na(observation)])), hmm)
-Inf - (-Inf)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
View(bw)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
View(hmm)
View(b)
View(f)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
View(bw)
View(bw)
bw.to.hmm(bw, hmm)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
library(tBKT)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
View(hmm)
View(newHmm)
observation
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bwIter(hmm, observation)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bw.to.hmm(bwIter(hmm, observation), hmm)
bwIter(hmm, observation)
bwIter(hmm, observation)$logStart - 0.0
bwIter(hmm, observation)$logTransNumer - bwIter(hmm, observation)$logTransDenom
class(bwIter(hmm, observation)$logTransNumer - bwIter(hmm, observation)$logTransDenom)
is.na(bwIter(hmm, observation)$logTransNumer - bwIter(hmm, observation)$logTransDenom)
Inf - Inf
exp(NaN)
bwIter(hmm, kc.data.train[["Changing axis bounds"]][["02ZjVTxC34"]])
bwIter(hmm, bkt.convert.seq(kc.data.train[["Changing axis bounds"]][["02ZjVTxC34"]]))
bwIter(hmm, bkt.convert.seq(kc.data.train[["Changing axis bounds"]][["dq0JPbG008"]]))
-Inf - 0.6931472
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
library(tBKT)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
View(bw)
View(bw)
View(bw)
View(bw)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
View(bw)
View(tempHmm)
View(newHmm)
View(newHmm)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess','slip'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
library(tBKT)
library(tBKT)
View(kc.data)
View(kc.data.train)
bkt.hmm.fit(observation = kc.data.train$`Changing axis bounds`$`02ZjVTxC34`)
lapply(kc.data.train[[1]], function(x) bkt.hmm.fit(x))
lapply(kc.data.train[[1]], function(x) bkt.hmm.fit(observation = x))
test = lapply(kc.data.train[[1]], function(x) bkt.hmm.fit(observation = x))
View(test)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[stu]], c('guess'))
)
View(stu.ecal)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess'))
)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess')))
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess'))
)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess')))
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess')))
stu.ecal[[1]]
stu.ecal[[1]][["02ZjVTxC34"]]
library(tBKT)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess')))
View(stu.ecal)
library(tBKT)
library(tBKT)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess')))
warnings()
stu.ecal[[1]]
stu.ecal[[1]][["02ZjVTxC34"]]
stu.ecal[[1]][["02ZjVTxC"]]
library(tBKT)
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess')))
View(test)
View(test)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], params = c('guess'))
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])
for (i in 1:100) {bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])}
for (i in 1:100) {bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])}
for (i in 1:100) {bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])}
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.hmm.fit((bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess'))), kc.data.train[[1]][[stu]]))
test = lapply(names(kc.data.train[[1]]), function(stu) bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][[stu]], c('guess'))), kc.data.train[[1]][[stu]]))
View(test)
library(tBKT)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
library(tBKT)
library(tBKT)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
if (NaN < 10E-9)
{}
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
new.bw
new.bw(2,2)
is.infinite(new.bw(2,2))
is.infinite(lapply(new.bw(2,2), function(x) as.list(x))
)
test.matrix = new.bw(2, 2)$logEmitNumer
View(test.matrix)
is.infinite(test.matrix)
all(is.infinite(test.matrix))
all(is.infinite(test.matrix))
all(!is.infinite(test.matrix))
isTRUE(1)
isTRUE(0)
isTRUE(TRUE)
isTRUE(as)
isTRUE(TRUE])
isTRUE('TRUE')
isTRUE("TRUE")
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
View(test)
View(bw)
-Inf - 0.299
View(hmm)
View(test)
View(test)
View(test)
-Inf - (-Inf)
new.bw(2,2)
new.bw(2,2)logEmitNumer - new.bw(2,2)logEmitDenom
new.bw(2,2)$logEmitNumer - new.bw(2,2)$logEmitDenom
library(tBKT)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
View(bw)
bw$logTransNumer - bw$logTransDenom
is.na(bw$logTransNumer - bw$logTransDenom)
all(is.na(bw$logTransNumer - bw$logTransDenom))
all(!is.na(bw$logTransNumer - bw$logTransDenom))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
View(gamma)
View(bw)
bw[["logTransNumer"]]
bw[["logTransDenom"]]
View(bw)
bw[["logTransDenom"]]
bw[["logTransNumer"]] - bw[["logTransDenom"]]
View(b)
View(f)
log(0)
replicate(100, try(bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])))
replicate(10000, try(bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])))
library(tBKT)
replicate(10000, try(bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])))
replicate(1000, try(bkt.hmm.fit(bkt.to.hmm(bkt.generate.ecalparams(stu.ecal[[1]][["h31E235Th5"]], c("guess"))), kc.data.train[["Changing axis bounds"]][["h31E235Th5"]])))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
library(tBKT)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecal[[1]], c('guess'))
View(kc.stu.trained)
View(kc.stu.ecal.trained)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
kc.stu.ecal.trained[["Changing axis bounds"]][["0GlR30c2Mt"]][["bkt.params"]][["learn"]]
View(kc.stu.ecal.trained[["Changing axis bounds"]][["0GlR30c2Mt"]][["bkt.params"]])
View(kc.stu.ecal.trained[["Changing axis bounds"]][["0GlR30c2Mt"]][["bkt.params"]])
View(kc.data.train)
View(kc.stu.trained)
View(kc.stu.trained[["Changing axis bounds"]][["02ZjVTxC34"]][["bkt.params"]])
library(tBKT)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, testset.ratio = 2)
library(tBKT)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, testset.ratio = 2)
View(test)
library(tBKT)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, testset.ratio = 2)
library(tBKT)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, testset.ratio = 2)
View(test)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, testset.ratio = 2)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, testset.ratio = 2)
View(params)
class(params[["Changing axis bounds"]])
is.list(params[["Changing axis bounds"]])
is.vector(params[["Changing axis bounds"]])
View(params)
is.vector(params[["Changing axis bounds"]])
params[["Changing axis bounds"]][["3008m5T78s"]]
is.null(params[["Changing axis bounds"]][["3008m5T78s"]])
is.null(params[["Changing axis bounds"]][[4]])
is.null(params[["Changing axis bounds"]][[20000]])
is.null(params[["Changing axis bounds"]][[2000]])
is.null(params[["Changing axis bounds"]][[428]])
library(tBKT)
test = bkt.evaluation(kc.data, kc.stu.ecal.trained, TRUE, testset.ratio = 2)
View(test)
View(kc.trained)
library(tBKT)
test = bkt.evaluation(kc.data, kc.trained, testset.ratio = 2)
View(test)
library(tBKT)
kc.rmse = bkt.evaluation(kc.data, kc.trained, testset.ratio = 2, mean = TRUE)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(kc.rmse)
View(kc.stu.ecal.trained)
View(kc.id.ecal.rmse)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(result)
View(result)
View(result)
library(tBKT)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(tmp)
library(tBKT)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(kc.id.ecal.rmse)
View(kc.rmse)
mean(kc.rmse)
unlist(kc.rmse)
mean(unlist(kc.rmse))
library(tBKT)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(kc.id.ecal.rmse)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(tmp)
mean(tmp[["Changing axis bounds"]])
mean(unlist(tmp[["Changing axis bounds"]]))
library(tBKT)
View(kc.id.ecal.rmse)
View(kc.id.ecal.rmse)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(tmp)
View(tmp)
tmp[["Changing axis bounds"]]
View(tmp)
tmp[["Changing axis bounds"]]
mean(tmp[["Changing axis bounds"]])
library(tBKT)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(kc.id.ecal.rmse)
mean(kc.id.ecal.rmse)
mean(unlist(kc.id.ecal.rmse))
mean(unlist(kc.rmse))
kc.stu.ecal.rmse = kc.id.ecal.rmse
View(kc.stu.trained)
kc.stu.random.trained = kc.stu.trained
kc.stu.random.rmse = bkt.evaluation(kc.data, kc.stu.random.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
mean(unlist(kc.stu.random.rmse))
library(tBKT)
View(stu.ecal)
save.image("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/2004_2005.RData")
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/data_params.RData")
save.image("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/data_params.RData")
View(data.params)
data.params$filter$minStu = 10
data.params$filter$minKc = 10
data.params$filter$minObs = 10
data.params$data.info$base = 'kc'
library(tBKT)
kc.data = bkt.data(bkt.data.prep(data.params$data.info), data.params$data.info, data.params$filter)
View(kc.data)
View(kc.data)
data.params$data.info$base = 'stu'
stu.data = bkt.data(bkt.data.prep(data.params$data.info), data.params$data.info, data.params$filter)
kc.id.ecal.rmse = bkt.evaluation(kc.data, kc.stu.ecal.trained, id = TRUE, testset.ratio = 2, mean = TRUE)
View(kc.data)
kc.data.train = bkt.generate.trainset(kc.data)
kc.trained = bkt.ex.hmm(data = kc.data.train)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
kc.trained = bkt.ex.hmm(data = kc.data.train)
kc.stu.trained = bkt.ex.id.hmm(data = kc.data.train)
stu.ecals = bkt.ecal.stu(stu.data)
View(stu.ecals)
stu.ecals = lapply(c(2:20), function(x) bkt.ecal.stu(stu.data, k = x))
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecals[[1]], c('guess'))
View(stu.ecals)
kc.stu.ecal.trained = lapply(stu.ecals, function(x) bkt.ex.id.ecal.hmm(kc.data.train, x, c('guess', 'slip')))
View(kc.stu.ecal.trained)
for (i in 20:10) {
}
View(stu.ecals)
kc.stu.ecal.trained = list()
for (i in 19:10) {
kc.stu.ecal.trained[i] = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecals[[i]], c("guess", "slip"))
}
for (i in 19:10) {
cat(paste('K = ', i))
kc.stu.ecal.trained[i] = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecals[[i]], c("guess", "slip"))
}
View(kc.stu.ecal.trained)
View(kc.stu.trained)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
View(kc.stu.ecal.trained)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecals[[19]], c("guess", "slip"))
View(kc.data.train)
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecals[[19]], c("guess", "slip"))
library(tBKT)
kc.stu.ecal.trained = bkt.ex.id.ecal.hmm(kc.data.train, stu.ecals[[19]], c("guess", "slip"))
View(tempHmm)
View(hmm)
View(newHmm)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/REDM/bkt/.RData")
View(kc.data.train)
View(kc.trained)
View(kc.trained)
contributors()
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
View(stu.ecals)
library("tBKT", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
bkt.combined.params(stu.ecals[[1]]$stu_000d56dbbb, kc.trained[["Adding Polynomials-1"]]$bkt.params, c('guess', 'slip'))
kc.trained[["Adding Polynomials-1"]]$bkt.params
bkt.combined.params(stu.ecals[[1]]$stu_000d56dbbb, kc.trained[["Adding Polynomials-1"]]$bkt.params, c('guess'))
bkt.combined.params(stu.ecals[[1]]$stu_000d56dbbb, kc.trained[["Adding Polynomials-1"]]$bkt.params, c('sli['))
bkt.combined.params(stu.ecals[[1]]$stu_000d56dbbb, kc.trained[["Adding Polynomials-1"]]$bkt.params, c('slip'))
remove.packages("bkt")
kc.stu.idg.combined = list()
for (i in 1:19) {
kc.data.idg.trained[[i]] = lapply(names(kc.data), function(x) lapply(names(kc.data[[x]]), function(y) bkt.combined.params(stu.params = stu.ecals[[i]][[y]], kc.params = kc.trained[[x]]$bkt.params, cparams = c('guess'))))
}
for (i in 1:19) {
kc.stu.idg.combined[[i]] = lapply(names(kc.data), function(x) lapply(names(kc.data[[x]]), function(y) bkt.combined.params(stu.params = stu.ecals[[i]][[y]], kc.params = kc.trained[[x]]$bkt.params, cparams = c('guess'))))
}
for (i in 1:19) {
}
kc.stu.ids.combined = list()
for (i in 1:19) {
kc.stu.ids.combined[[i]] = lapply(names(kc.data), function(x) lapply(names(kc.data[[x]]), function(y) bkt.combined.params(stu.params = stu.ecals[[i]][[y]], kc.params = kc.trained[[x]]$bkt.params, cparams = c('slip'))))
}
View(kc.stu.idg.combined)
View(stu.ecals)
load("/Volumes/DATA/MSC - Thesis/Data - Experiment/mrt_REDM/bkt/.RData")
library(tBKT)
View(kc.trained)
View(kc.trained)
library(tBKT)
test = bkt.combined.params.all(kc.trained, stu.ecals[[1]], kc.data, c('guess'))
View(test)
